buildscript {
    ext { // build.gradle에서 사용하는 전역 변수를 설정
        springBootVersion = '2.5.3'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // spring boot의 의존성 관리 플러그임

group 'com.spring.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories { // 의존성 라이브러리들을 어떤 원격 저장소에서 받을지 명시
    mavenCentral()
    jcenter()
}

dependencies { // 개발에 필요한 의존성 선언
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // lombok: 필수 라이브러리 - getter, setter, 생성자, toString 등을 어노테이션으로 자동 생성
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'

    //Spring Data JPA 적용하기
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' //spring data jpa 추상화 라이브러리 For spring boot
    implementation 'com.h2database:h2' //인메모리 관계형 데이터베이스
    //별도의 설치 없이 프로젝트 의존성만으로 관리 가능
    //메모리에서 실행되기 때문에 어플리케이션을 재시작할 때마다 초기화
    //테스트용으로 많이 사용하며, 실습에서는 JPA 테스트 & 로컬 구동용으로 사용

    // Mustache로 화면 구성하기
    implementation 'org.springframework.boot:spring-boot-starter-mustache'

    // Swagger 사용하기
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'

    // setting for spring security
    // 클라이언트 입장에서 소셜 기능 구현 시 필요한 의존성기
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
}
// 인텔리제이는 메이븐 저장소의 데이터를 인덱싱하여 관리 -> 커뮤니티 버전을 사용해도 의존성 자동완성 가능

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

test {
    useJUnitPlatform()
}